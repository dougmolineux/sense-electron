'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWindowsInstaller = undefined;

var _bluebird = require('bluebird');

let createWindowsInstaller = exports.createWindowsInstaller = (() => {
  var ref = (0, _bluebird.coroutine)(function* (options) {
    let appDirectory = options.appDirectory;
    let outputDirectory = options.outputDirectory;
    let loadingGif = options.loadingGif;

    outputDirectory = _path2.default.resolve(outputDirectory || 'installer');

    const vendorPath = _path2.default.join(__dirname, '..', 'vendor');
    const vendorUpdate = _path2.default.join(vendorPath, 'Update.exe');
    const appUpdate = _path2.default.join(appDirectory, 'Update.exe');

    yield fsUtils.copy(vendorUpdate, appUpdate);

    const defaultLoadingGif = _path2.default.join(__dirname, '..', 'resources', 'install-spinner.gif');
    loadingGif = loadingGif ? _path2.default.resolve(loadingGif) : defaultLoadingGif;

    let certificateFile = options.certificateFile;
    let certificatePassword = options.certificatePassword;
    let remoteReleases = options.remoteReleases;
    let signWithParams = options.signWithParams;
    let remoteToken = options.remoteToken;


    const metadata = {
      description: '',
      iconUrl: 'https://raw.githubusercontent.com/atom/electron/master/atom/browser/resources/win/atom.ico'
    };

    if (options.usePackageJson !== false) {
      const appResources = _path2.default.join(appDirectory, 'resources');
      const asarFile = _path2.default.join(appResources, 'app.asar');
      let appMetadata;

      if (yield fsUtils.fileExists(asarFile)) {
        appMetadata = JSON.parse(_asar2.default.extractFile(asarFile, 'package.json'));
      } else {
        appMetadata = JSON.parse((yield fsUtils.readFile(_path2.default.join(appResources, 'app', 'package.json'), 'utf8')));
      }

      Object.assign(metadata, {
        exe: `${ appMetadata.name }.exe`,
        title: appMetadata.productName || appMetadata.name
      }, appMetadata);
    }

    Object.assign(metadata, options);

    if (!metadata.authors) {
      if (typeof metadata.author === 'string') {
        metadata.authors = metadata.author;
      } else {
        metadata.authors = (metadata.author || {}).name || '';
      }
    }

    const copyright = metadata.copyright || `Copyright Â© ${ new Date().getFullYear() } ${ metadata.authors || metadata.owners }`;

    const nuspecContent = `<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <id>${ metadata.name }</id>
    <title>${ metadata.title }</title>
    <version>${ convertVersion(metadata.version) }</version>
    <authors>${ metadata.authors || metadata.owners }</authors>
    <owners>${ metadata.owners || metadata.authors }</owners>
    <iconUrl>${ metadata.iconUrl }</iconUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <description>${ metadata.description }</description>
    <copyright>${ copyright }</copyright>${ metadata.extraMetadataSpecs || '' }
  </metadata>
  <files>
    <file src="locales${ _path2.default.sep }**" target="lib\\net45\\locales" />
    <file src="resources${ _path2.default.sep }**" target="lib\\net45\\resources" />
    <file src="*.bin" target="lib\\net45" />
    <file src="*.dll" target="lib\\net45" />
    <file src="*.pak" target="lib\\net45" />
    <file src="Update.exe" target="lib\\net45\\squirrel.exe" />
    <file src="icudtl.dat" target="lib\\net45\\icudtl.dat" />
    <file src="LICENSE" target="lib\\net45\\LICENSE" />
    <file src="${ metadata.exe }" target="lib\\net45\\${ metadata.exe }" />${ metadata.extraFileSpecs || '' }
  </files>
</package>`;
    log(`Created NuSpec file:\n${ nuspecContent }`);

    const nugetOutput = yield fsUtils.createTempDir('si-');
    const targetNuspecPath = _path2.default.join(nugetOutput, metadata.name + '.nuspec');

    yield fsUtils.writeFile(targetNuspecPath, nuspecContent);

    const monoExe = 'mono';
    const useMono = process.platform !== 'win32';
    let cmd = _path2.default.join(vendorPath, 'nuget.exe');
    let args = ['pack', targetNuspecPath, '-BasePath', appDirectory, '-OutputDirectory', nugetOutput, '-NoDefaultExcludes', '-NonInteractive', '-Verbosity', log.enabled ? 'detailed' : 'quiet'];

    if (useMono) {
      args.unshift(cmd);
      cmd = monoExe;
    }

    // Call NuGet to create our package
    yield (0, _spawnPromise2.default)(cmd, args);
    const nupkgPath = _path2.default.join(nugetOutput, `${ metadata.name }.${ metadata.version }.nupkg`);

    if (remoteReleases) {
      cmd = _path2.default.join(vendorPath, 'SyncReleases.exe');
      args = ['-u', remoteReleases, '-r', outputDirectory];

      if (useMono) {
        args.unshift(cmd);
        cmd = monoExe;
      }

      if (remoteToken) {
        args.push('-t', remoteToken);
      }

      yield (0, _spawnPromise2.default)(cmd, args);
    }

    cmd = _path2.default.join(vendorPath, 'Update.com');
    args = ['--releasify', nupkgPath, '--releaseDir', outputDirectory, '--loadingGif', loadingGif];

    if (useMono) {
      args.unshift(_path2.default.join(vendorPath, 'Update-Mono.exe'));
      cmd = monoExe;
    }

    if (signWithParams) {
      args.push('--signWithParams');
      args.push(signWithParams);
    } else if (certificateFile && certificatePassword) {
      args.push('--signWithParams');
      args.push(`/a /f "${ _path2.default.resolve(certificateFile) }" /p "${ certificatePassword }"`);
    }

    if (options.setupIcon) {
      args.push('--setupIcon');
      args.push(_path2.default.resolve(options.setupIcon));
    }

    if (options.noMsi) {
      args.push('--no-msi');
    }

    yield (0, _spawnPromise2.default)(cmd, args);

    if (options.fixUpPaths !== false && metadata.productName) {
      log('Fixing up paths');

      const setupPath = _path2.default.join(outputDirectory, `${ metadata.productName }Setup.exe`);
      const setupMsiPath = _path2.default.join(outputDirectory, `${ metadata.productName }Setup.msi`);
      const unfixedSetupPath = _path2.default.join(outputDirectory, 'Setup.exe');

      log(`Renaming ${ unfixedSetupPath } => ${ setupPath }`);

      yield fsUtils.rename(unfixedSetupPath, setupPath);

      const msiPath = _path2.default.join(outputDirectory, 'Setup.msi');
      if (yield fsUtils.fileExists(msiPath)) {
        yield fsUtils.rename(msiPath, setupMsiPath);
      }
    }
  });
  return function createWindowsInstaller(_x) {
    return ref.apply(this, arguments);
  };
})();

exports.convertVersion = convertVersion;

var _spawnPromise = require('./spawn-promise');

var _spawnPromise2 = _interopRequireDefault(_spawnPromise);

var _asar = require('asar');

var _asar2 = _interopRequireDefault(_asar);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsUtils = require('./fs-utils');

var fsUtils = _interopRequireWildcard(_fsUtils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = require('debug')('electron-windows-installer:main');

function convertVersion(version) {
  const parts = version.split('-');
  const mainVersion = parts.shift();

  if (parts.length > 0) {
    return [mainVersion, parts.join('-').replace(/\./g, '')].join('-');
  } else {
    return mainVersion;
  }
}